<snippet>
	<content><![CDATA[
const long long MOD = 998244353;

inline long long add(long long a, long long b) {
  a += b;
  if (a >= MOD) a -= MOD;
  return a;
}

inline long long sub(long long a, long long b) {
  a -= b;
  if (a < 0) a += MOD;
  return a;
}

inline long long mul(long long a) {
  return a;
}

template<typename... T>
inline long long mul(long long a, T... b) {
  return (long long) ((long long) a * mul(b...) % MOD);
}

inline long long power(long long a, long long b) {
  long long res = 1;
  while (b) {
    if (b & 1) {
      res = mul(res, a);
    }
    a = mul(a, a);
    b >>= 1;
  }
  return res;
}

inline long long inv(long long a) {
  a %= MOD;
  if (a < 0) a += MOD;
  long long b = MOD, u = 0, v = 1;
  while (a) {
    long long t = b / a;
    b -= t * a; swap(a, b);
    u -= t * v; swap(u, v);
  }
  assert(b == 1);
  if (u < 0) u += MOD;
  return u;
}

const int MAXN = 1e6 + 10;
vector<long long> fact(MAXN) , ifact(MAXN);
void pre() {
  fact[0] = ifact[0] = 1LL;
  fact[1] = ifact[1] = 1LL;
  for(int i = 2 ; i < MAXN ; ++i) {
    fact[i] = mul(fact[i - 1] , 1LL * i);
    ifact[i] = inv(fact[i]);
  }
}

long long P(int N , int K) {
  if(K > N) {
    return 0LL;
  }
  return mul(fact[N] , ifact[N - K]);
}

long long C(int N , int K) {
  if(K > N) {
    return 0LL;
  }
  return mul(fact[N] , ifact[N - K] , ifact[K]);
} 

]]></content>
	<tabTrigger>combinations</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
